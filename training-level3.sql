CREATE TABLE public.karyawan (
	id int8 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	nama varchar(45) NOT NULL,
	jk varchar(15) not null,
	dob date not null,
	status varchar(20) not null,
	alamat text NULL,
	created_date timestamp NOT NULL,
	deleted_date timestamp NULL,
	updated_date timestamp NOT NULL,
	CONSTRAINT karyawan_pkey PRIMARY KEY (id)
);

CREATE TABLE public.detail_karyawan (
	id int8 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	nik varchar(20) NULL,
	npwp varchar(20) NULL,
	id_karyawan int8 NULL,
	created_date timestamp NOT NULL,
	deleted_date timestamp NULL,
	updated_date timestamp NOT NULL,
	CONSTRAINT detail_karyawan_pkey PRIMARY KEY (id),
	CONSTRAINT id_karyawan_pkey FOREIGN key (id_karyawan) REFERENCES public.karyawan(id)
);

CREATE TABLE public.rekening (
	id int8 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	nama varchar(45) NOT NULL,
	jenis varchar(15) NOT NULL,
	nomor varchar(15) NOT NULL,
	id_karyawan int8 NOT NULL,
	created_date timestamp NOT NULL,
	deleted_date timestamp NULL,
	updated_date timestamp NOT NULL,
	CONSTRAINT rekening_pkey PRIMARY KEY (id),
	CONSTRAINT id_karyawan_pkey FOREIGN key (id_karyawan) REFERENCES public.karyawan(id)
);


CREATE TABLE public.training (
	id int8 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	tema varchar(45) NOT NULL,
	nama_pengajar varchar(45) NOT NULL,
	created_date timestamp NOT NULL,
	deleted_date timestamp NULL,
	updated_date timestamp NOT NULL,
	CONSTRAINT training_pkey PRIMARY KEY (id)
);


CREATE TABLE public.karyawan_training (
	id int8 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	id_karyawan int8 NOT NULL,
	id_training int8 NOT NULL,
	tanggal_training date NOT NULL,
	created_date timestamp NOT NULL,
	deleted_date timestamp NULL,
	updated_date timestamp NOT NULL,
	CONSTRAINT karyawan_training_pkey PRIMARY KEY (id),
	CONSTRAINT id_karyawan_pkey FOREIGN key (id_karyawan) REFERENCES public.karyawan(id),
	CONSTRAINT id_training_pkey FOREIGN key (id_training) REFERENCES public.training(id)
);


--soal1
CREATE OR REPLACE PROCEDURE savekaryawan (
    INOUT resnama character varying,
    INOUT resjk character varying,
    INOUT resdob DATE,
    INOUT resstatus character varying,
    INOUT resalamat text,
    INOUT resnik character varying,
    INOUT resnpwp character varying,
    INOUT resid BIGINT,
    INOUT eror_code INT,
    INOUT eror_desc character varying
)
LANGUAGE plpgsql
AS $procedure$
 begin
	 if resnama is null Then
	 raise notice 'nama kosong';
	 eror_desc = 'nama wajib diisi';
	 eror_code = 404;
	 return;
	 elseif resjk is null then
	 raise notice 'jenis kelamin kosong';
	 eror_desc = 'jenis kelamin wajib diisi';
	 eror_code = 404;
	 return;
	 elseif resdob is null then
	 raise notice 'dob kosong';
	 eror_desc = 'dob wajib diisi';
	 eror_code = 404;
	 return;
	 elseif resstatus is null then
	 raise notice 'status kosong';
	 eror_desc = 'status wajib diisi';
	 eror_code = 404;
	 return;
	 else
	 raise notice 'data lengkap';
	 end if;
	 
	 INSERT into public.karyawan 
	 (id, nama, jk, dob, status, alamat,created_date,updated_date)
	 SELECT nextval('karyawan_id_seq'),
	 resnama,
	 resjk,
	 resdob,
	 resstatus,
	 resalamat,
	 NOW(),NOW()
	 RETURNING id INTO resid;
	
	 INSERT INTO public.detail_karyawan (id, nik, npwp, id_karyawan, created_date, updated_date)
     SELECT nextval('detail_karyawan_id_seq'), 
     resnik, 
     resnpwp, 
     resid,
     NOW(),
     NOW();
	 
	 eror_desc = 'sukses';
	 eror_code = 200;
 	 commit;
 END;
 $procedure$
;

--soal2
CREATE OR REPLACE PROCEDURE updatekaryawan (
    INOUT resnama character varying,
    INOUT resjk character varying,
    INOUT resdob DATE,
    INOUT resstatus character varying,
    INOUT resalamat text,
    INOUT resnik character varying,
    INOUT resnpwp character varying,
    INOUT resid BIGINT,
    INOUT eror_code INT,
    INOUT eror_desc character varying
)
LANGUAGE plpgsql
AS $procedure$
 begin
	 If not Exists(select id from karyawan where id = resid) then raise notice 'id tidak ada';
	 eror_desc = 'id tidak ditemukan';
	 eror_code = '404';
	 return;
	 else raise notice 'id ada';
	 end if;
	 
	 update public.karyawan 
	 set nama = resnama, jk =resjk, dob = resdob, status = resstatus, alamat = resalamat, updated_date = NOW()
	 where id =resid 
	 RETURNING id INTO resid;
	
	 update public.detail_karyawan 
	 set nik = resnik, npwp = resnpwp, updated_date =NOW()
	 where id_karyawan =resid;
	 
	 eror_desc = 'sukses';
	 eror_code = 200;
 	 commit;
 END;
 $procedure$
;

--soal3
CREATE OR REPLACE FUNCTION public.getListKaryawan(rqnama character varying)
RETURNS TABLE(resid integer, resnama character varying, resjk 
character varying, resdob date, resstatus character varying, resalamat text, resnik character varying, resnpwp character varying)
LANGUAGE plpgsql
AS $function$
DECLARE
 var_r record;
BEGIN
 FOR var_r in
 	select karyawan.id, nama, jk, dob, status, alamat, nik, npwp
	FROM karyawan
	join detail_karyawan
	on karyawan.id = detail_karyawan.id_karyawan 
	WHERE nama LIKE rqnama
 LOOP
	 resid := var_r.id ;
	 resnama := var_r.nama ;
	 resjk := var_r.jk ;
	 resdob := var_r.dob;
	 resstatus := var_r.status ;
	 resalamat := var_r.alamat ;
	 resnik := var_r.nik ;
	 resnpwp := var_r.npwp;
	 RETURN NEXT;
 END LOOP;
END; 
$function$;

--soal4
CREATE OR REPLACE FUNCTION public.getKaryawan(rqid integer)
RETURNS TABLE(resid bigint, resnama character varying, resjk 
character varying, resdob date, resstatus character varying, resalamat text, resnik character varying, resnpwp character varying)
LANGUAGE plpgsql
AS $function$
BEGIN
 RETURN QUERY
 select k.id, k.nama, k.jk,k.dob,k.status,k.alamat, dk.nik, dk.npwp
 FROM karyawan AS k
 join detail_karyawan as dk 
 on k.id = dk.id_karyawan 
 WHERE k.id = rqId;
END;
$function$
;


--soal5
CREATE OR REPLACE PROCEDURE savetraining (
    INOUT restema character varying,
    inout resnama_pengajar character varying,
    INOUT resid BIGINT,
    INOUT eror_code INT,
    INOUT eror_desc character varying
)
LANGUAGE plpgsql
AS $procedure$
 begin
	 if restema is null Then
	 raise notice 'tema kosong';
	 eror_desc = 'tema wajib diisi';
	 eror_code = 404;
	 return;
	 elseif resnama_pengajar is null Then
	 raise notice 'nama pengajar kosong';
	 eror_desc = 'nama pengajar wajib diisi';
	 eror_code = 404;
	 return;
	 else
	 raise notice 'data lengkap';
	 end if;
	 
	 INSERT into public.training
	 (id, tema, nama_pengajar, created_date, updated_date)
	 SELECT nextval('training_id_seq'),
	 restema,
	 resnama_pengajar,
	 NOW(),NOW();
	 
	 eror_desc = 'sukses';
	 eror_code = 200;
 	 commit;
 END;
 $procedure$
;



--soal6
CREATE OR REPLACE PROCEDURE updatetraining (
    INOUT restema character varying,
    INOUT resnama_pengajar character varying,
    INOUT resid BIGINT,
    INOUT eror_code INT,
    INOUT eror_desc character varying
)
LANGUAGE plpgsql
AS $procedure$
 begin
	 If not Exists(select id from training where id = resid) then raise notice 'id tidak ada';
	 eror_desc = 'id tidak ditemukan';
	 eror_code = '404';
	 return;
	 else raise notice 'id ada';
	 end if;
	 
	 update public.training 
	 set tema = restema, nama_pengajar = resnama_pengajar, updated_date = NOW()
	 where id =resid;
	 
	 eror_desc = 'sukses';
	 eror_code = 200;
 	 commit;
 END;
 $procedure$
;


--soal7
CREATE OR REPLACE FUNCTION public.getListTraining(rqtema character varying)
RETURNS TABLE(resid integer, restema character varying, resnama_pengajar character varying)
LANGUAGE plpgsql
AS $function$
DECLARE
 var_r record;
BEGIN
 FOR var_r in
 	select id, tema, nama_pengajar 
	FROM training
	WHERE tema LIKE rqtema
 LOOP
	 resid := var_r.id ;
	 restema := var_r.tema ;
	 resnama_pengajar := var_r.nama_pengajar;
	 RETURN NEXT;
 END LOOP;
END; 
$function$;

--soal8
CREATE OR REPLACE FUNCTION public.getByIdTraining(rqid bigint)
RETURNS TABLE(resid bigint, restema character varying, resnama_pengajar character varying)
LANGUAGE plpgsql
AS $function$
BEGIN
 RETURN QUERY
 select id, tema, nama_pengajar
 FROM training
 WHERE id = rqId;
END;
$function$
;

--soal9
CREATE OR REPLACE PROCEDURE saveTrainingKaryawan (
    INOUT id_karyawan bigint,
    INOUT id_training bigint,
    INOUT tanggal_training DATE,
    INOUT resid bigint,
    INOUT eror_code INT,
    INOUT eror_desc character varying
)
LANGUAGE plpgsql
AS $procedure$
 begin
	 if not Exists(select id from karyawan where id = id_karyawan) 
	 then raise notice 'id karyawan tidak ada';
	 eror_desc = 'id karyawan tidak ditemukan';
	 eror_code = 404;
	 return;
	 elseif not exists(select id from training where id = id_training)
	 then raise notice 'id training tidak ada';
	 eror_desc = 'id training tidak ditemukan';
	 eror_code = 404;
	 return;
	 elseif tanggal_training is null
	 then raise notice 'tanggal training kosong';
	 eror_desc = 'tanggal training tidak boleh kosong';
	 eror_code = 404;
	 return;
	 else
	 raise notice 'data lengkap';
	 end if;
	 
	 INSERT into public.karyawan_training 
	 (id, id_karyawan, id_training, tanggal_training, created_date,updated_date)
	 SELECT nextval('karyawan_training_id_seq'),
	 id_karyawan,
	 id_training ,
	 tanggal_training,
	 NOW(),NOW();
	 
	 eror_desc = 'sukses';
	 eror_code = 200;
 	 commit;
 END;
 $procedure$
;


--soal10
CREATE OR REPLACE PROCEDURE public.deleteTrainingKaryawan(
	INOUT resid bigint,
	INOUT eror_code INT,
    INOUT eror_desc character varying
)
LANGUAGE plpgsql
AS $procedure$
begin
	If not Exists(select id from karyawan_training where id = resid) then raise notice 'id tidak ada';
	eror_desc = 'id tidak ditemukan';
	eror_code = '404';
	return;
	else raise notice 'id ada';
	end if;

	delete from karyawan_training where id = resid;
	
	eror_desc = 'sukses';
	eror_code = 200;
 commit;
END;
$procedure$
;

--soal11
CREATE OR REPLACE PROCEDURE saveRekening (
    INOUT id_karyawan bigint,
    INOUT resnama character varying,
    INOUT resjenis character varying,
    INOUT resnomor character varying,
    INOUT resid bigint,
    INOUT eror_code INT,
    INOUT eror_desc character varying
)
LANGUAGE plpgsql
AS $procedure$
 begin
	 if not Exists(select id from karyawan where id = id_karyawan) 
	 then raise notice 'id karyawan tidak ada';
	 eror_desc = 'id karyawan tidak ditemukan';
	 eror_code = 404;
	 return;
	 else
	 raise notice 'id karyawan ada';
	 end if;
	 
	 INSERT into public.rekening 
	 (id, id_karyawan, nama, jenis, nomor, created_date,updated_date)
	 SELECT nextval('rekening_id_seq'),
	 id_karyawan,
	 resnama,
	 resjenis,
	 resnomor,
	 NOW(),NOW();
	 
	 eror_desc = 'sukses';
	 eror_code = 200;
 	 commit;
 END;
 $procedure$
;

--soal12
CREATE OR REPLACE PROCEDURE updaterekening (
    INOUT id_karyawan bigint,
    INOUT resnama character varying,
    INOUT resjenis character varying,
    INOUT resnomor character varying,
    INOUT resid BIGINT,
    INOUT eror_code INT,
    INOUT eror_desc character varying
)
LANGUAGE plpgsql
AS $procedure$
 begin
	 If not Exists(select id from rekening where id = resid) then raise notice 'id tidak ada';
	 eror_desc = 'id tidak ditemukan';
	 eror_code = '404';
	 return;
	 else raise notice 'id ada';
	 end if;
	 
	 update public.rekening
	 set nama = resnama, jenis = resjenis, nomor = resnomor, updated_date = NOW()
	 where id =resid;
	 
	 eror_desc = 'sukses';
	 eror_code = 200;
 	 commit;
 END;
 $procedure$
;

--soal13
CREATE OR REPLACE PROCEDURE public.deleteRekening(
	INOUT resid bigint,
	INOUT eror_code INT,
    INOUT eror_desc character varying
)
LANGUAGE plpgsql
AS $procedure$
begin
	If not Exists(select id from rekening where id = resid) then raise notice 'id tidak ada';
	eror_desc = 'id tidak ditemukan';
	eror_code = '404';
	return;
	else raise notice 'id ada';
	end if;

	update rekening set deleted_date = NOW() where id =resid;
	
	eror_desc = 'sukses';
	eror_code = 200;
 commit;
END;
$procedure$
;

--test_soal1
call savekaryawan('alam mina', 'laki-laki', DATE '2000-11-14', 'kontrak', 'depok', null, null, null, null, null) 

--test_soal2
call updatekaryawan('kanzul faisal', 'laki-laki', DATE '2000-08-02', 'kontrak', 'padang', '137111', null, 1, null, null)

--test_soal3
select * from getListKaryawan('%an%');

--test_soal4
select * from getkaryawan (1);

--test_soal5
call savetraining('qa manual','iqbal',null,null,null);

--test_soal6
call updatetraining('java springboot', 'riki', 1, null, null) 

--test_soal7
select * from getlisttraining('%an%') 

--test_soal8
select * from getbyidtraining(1) 

--test_soal9
call savetrainingkaryawan(2,2,DATE '2023-03-15',null,null,null);

--test_soal10
call deletetrainingkaryawan(2,null,null);

--test_soal11
call saverekening(2,'alam mina', 'mandiri','234156',null,null,null);

--test_soal12
call updaterekening(1, 'kanzul faisal alam mina', 'bri','123456',1,null,null);

--test_soal13
call deleterekening(2,null,null);








